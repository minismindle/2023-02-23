#include <iostream>

using namespace std;

void Helloworld()
{
    cout << "Hello World" << endl;
}
void HelloNumber(int number)
{
    cout << "Hello Number" << number << endl;
}
class Knight
{
public:
    void AddHp(int addHp)
    {
        _hp += addHp;
    }
private:
    int _hp = 100;
};
class Functor
{
public:
    void operator() ()
    {
        cout << "Functor Test" << endl;
        cout << _value << endl;
    }
    bool operator() (int num)
    {
        cout << "Functor Test" << endl;
        _value += num;
        cout << _value << endl;

        return true;
    }
private:
    int _value = 0;
};

class MoveTask
{
public:
    void operator() ()
    {
        cout << "해당 좌표로 플레이어 이동" << endl;
    }
public:
    int _playerId;
    int _posX;
    int _posY;
};
int main()
{
    // 함수 객체(Functor) : 함수처럼 동작하는 객체
    // 함수 포인터의 단점

    // 함수 포인터 선언
    void(*pfunc)(void);
    // 동작을 넘겨줄 때 유용하다
    pfunc = &Helloworld;
    (*pfunc)();
    // 함수 포인터의 단점
    // 1) 시그니처가 안맞으면 쓸 수 없다.
    // 2) 상태를 가질 수 없다.
    // 함수처럼 동작하는 객체
    // () 연산자 오버로딩

    Functor functor;
    functor();
    bool ret = functor(3);

    // MMO 에서 함수 객체를 사용하는 예시
    // 클라 <-> 서버
    // ex) 클라 : 나 (5,0) 좌표로 이동시켜줘!
    MoveTask task;
    task._playerId = 100;
    task._posX = 5;
    task._posY = 0;
    // 나중에 여유가 될 때 이동
    task();
    return 0;
}

