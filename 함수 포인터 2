#include <iostream>

using namespace std;
class Knight
{
public:
    //맴버 함수
    int GetHp(int, int)
    {
        cout << "GetHp()" << endl;
        return _hp;
    }
public:
    int _hp = 100;
};
// typedef의 진실
// typedef 왼쪽 오른값 -> 오른쪽 (커스텀 타입 정의)

// 정확히는 왼쪽/오른쪽 기준이 아니라
// 선언 문법에서 typedef을 앞에다 붙이는 쪽

typedef int INTEGER;
typedef int* POINTER;
typedef int ARRAY[20];
typedef int (*PFUNC)(int, int); // 함수 포인터

typedef int (Knight :: *PMENPFUNC)(int, int); // 맴버함수 포인터


int Test(int a, int b)
{
    cout << "Test" << endl;
    return a + b;
}

int main()
{
    // 1) 포인터        *
    // 2) 변수 이름     fn
    // 3) 데이터 타입   함수(인자로 int 2개를 받고, int 1개를 반환)
   
    typedef int(*FUNC_TYPE)(int , int );

    FUNC_TYPE fn;

    //int(*fn)(int, int);

    fn = &Test; // & 생략 가능 (C언어 호환성 때문)

    fn(1, 2);

    (*fn)(1, 2);

    // 위 문법으로 전역함수/정적함수만 담을 수 있다 (호출 규약이 동일한 얘들)
    // fn = &Knight::GetHp;

    Test(1, 2);

    Knight k1;
    k1.GetHp(1, 1);

    PMENPFUNC mfn;

    mfn = &Knight::GetHp;

    (k1.*mfn)(1,1);
    
    Knight* k2 = new Knight();

    //((*k2).*mfn)(1, 1);
    (k2->*mfn)(1, 1);
    delete k2;
    return 0;
}

